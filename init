#!/bin/sh
#
# Porteus Kiosk initialization script.
# Author: T.Jokiel <http://porteus-kiosk.org>

# Install busybox applets then mount /proc, /sys and devtmpfs required for booting:
/bin/busybox --install -s
stty -echo; echo -e "\e[?25l"
mount -nt proc proc /proc
grep -q -w debug /proc/cmdline || { echo 0 >/proc/sys/kernel/printk 2>/dev/null; clear; }
mount -nt sysfs sysfs /sys
mount -nt devtmpfs none /dev
mkdir -p /dev/shm; chmod 1777 /dev/shm

# Variables:
grep -q -w debug /proc/cmdline && touch /tmp/lspci || quiet=yes
i=`echo "[1;33m""^ ""[0m"`
IP=`egrep -o "http_server=[^ ]+" /proc/cmdline | cut -d= -f2-`

# Functions:
nap() { [ $SLEEP -lt 11 ] && echo -en $i"[1m""device not ready yet? delaying [1;33m$SLEEP[0m[1m seconds              \r""[0m"; sleep 1; }
search() { FND=none
for x in `blkid 2>/dev/null | grep 'LABEL=".*Kiosk" TYPE="iso9660"' | cut -d: -f1 | cut -d/ -f3 | tac`; do
    # Perform booting from removable device check:
    if [ "`grep -w boot_from_usb /proc/cmdline`" ]; then
	# Remove partition to find device name:
	[ "`echo $x | grep "2$"`" ] && { [ "`echo $x | cut -c1-3`" = mmc ] && bdev=`echo $x | sed "s/p2$//"` || bdev=`echo $x | sed "s/2$//"`; } || bdev=$x
	if grep -q 1 /sys/block/$bdev/removable 2>/dev/null; then
	    [ -d /mnt/$x ] || { mkdir /mnt/$x; mount -n /dev/$x /mnt/$x 2>/dev/null; }
	    [ -e /mnt/$x/docs/$sgn ] && { rmdir /mnt/* 2>/dev/null; DEV=$x; FND=yes; break; } || umount -n /mnt/$x 2>/dev/null
	fi
    else
	[ -d /mnt/$x ] || { mkdir /mnt/$x; mount -n /dev/$x /mnt/$x 2>/dev/null; }
	[ -e /mnt/$x/docs/$sgn ] && { rmdir /mnt/* 2>/dev/null; DEV=$x; FND=yes; break; } || umount -n /mnt/$x 2>/dev/null
    fi
done
[ $FND = yes ]; }
lazy() { SLEEP=20; while [ $SLEEP -gt 0 -a $FND = none ]; do nap; let SLEEP=SLEEP-1; search; done }
escape() { umount -nl /mnt/$DEV 2>/dev/null; sleep 10; /sbin/poweroff -f; }

## Let's start!
[ "$quiet" ] || echo "[1m""Starting Porteus Kiosk <http://porteus-kiosk.org/>""[0m"

# Changes always in memory:
mount -nt tmpfs -o size=75% tmpfs /memory
mkdir -p /memory/xino /memory/changes /memory/images /memory/copy2ram

# Check if we are booting over network:
if [ "$IP" ]; then
    [ "$quiet" ] || echo $i"attempting PXE boot"
    for module in `lspci | grep 0200: | cut -d: -f3-4 | sed s/:/d0000/g`; do ./busybox modprobe `grep -i $module /lib/modules/$(uname -r)/modules.alias 2>/dev/null | tail -n1 | rev | cut -d" " -f1 | rev` 2>/dev/null; done
    ls /sys/class/net | grep -q eth || { for module in `find /lib/modules/$(uname -r)/kernel/drivers/net -name "*.ko" 2>/dev/null | sed 's/.ko//g'`; do ./busybox modprobe `basename $module` 2>/dev/null; ls /sys/class/net | grep -q eth && break; done; }
    ./busybox udhcpc >/dev/null || . fatal
    [ "$quiet" ] || echo $i"downloading kiosk data from the server"
    XZM=/memory/copy2ram; DOC=/mnt/net/docs
    mkdir -p $DOC; cd $DOC; /busybox wget -q $IP/docs/default.jpg $IP/docs/kiosk.sgn $IP/docs/version; /busybox wget -q $IP/docs/kiosk.jpg 2>/dev/null; cd /
    for x in `/busybox wget -q -O- $IP/xzm | tr " " "\n" | grep -i "href.*.xzm</" | cut -d">" -f2 | cut -d"<" -f1`; do echo "$x" >>/tmp/modules-pxe; done
    grep -q xzm /tmp/modules-pxe 2>/dev/null && rm -rf /lib || { echo "[1;31m""HTTP server not accessible? - exiting ...""[0m"; escape; }; NUM=`grep -c '.' /tmp/modules-pxe 2>/dev/null`
    for y in `cat /tmp/modules-pxe 2>/dev/null`; do [ "$quiet" ] || echo -en "[1;33m""  ($NUM modules left)  \r""[0m"; let NUM=NUM-1; /busybox wget -q -O $XZM/$y $IP/xzm/$y 2>/dev/null; done
else
    # Make sure that optical media are initialized:
    for x in /dev/sr*; do blkid $x >/dev/null; done
    # Search for *.sgn file:
    egrep -qo " first_run( |\$)" /proc/cmdline && sgn=first_run || sgn=kiosk.sgn
    search || lazy || . fatal
    XZM=/mnt/$DEV/xzm; DOC=/mnt/$DEV/docs
    # (testing code) recovery scenario:
    storage=/opt/storage; trg=`echo /dev/$DEV | sed 's/2$/4/'`
    if blkid $trg | grep -q "StorageBkp"; then
	mkdir -p $storage; mount $trg $storage 2>/dev/null
	if [ -e $storage/System-Backup/skip_backup ]; then
	    # TODO:
	    skipbkp=yes
	elif [ -e $storage/System-Backup/system-backup.iso ]; then
	    biso=yes; echo "booting kiosk" >> $storage/System-Backup/boot.log 2>/dev/null
	    if [ "`grep -c booting $storage/System-Backup/boot.log`" -gt 4 ]; then
		rm -f $storage/System-Backup/system-current.iso; touch $storage/System-Backup/skip_backup
		umount /mnt/$DEV 2>/dev/null; cat $storage/System-Backup/system-backup.iso > /dev/$DEV; sync; umount -a 2>/dev/null
		echo -e "[1;31mSystem failed to complete booting 5 times in a row.[0m\n[1;33mSystem image has been restored from the backup.[0m"
		echo -e "[0m\n[1;33mRestart in 10 seconds ....[0m"
		sleep 10; reboot -f
	    fi
	fi
	umount $storage 2>/dev/null
    fi
fi
if [ -z "$quiet" ]; then
    echo -en "                                                                        \r"
else
    mkdir -p /lib /opt/000 /opt/001; lspci >/tmp/lspci
    mount -o loop $XZM/000-kernel.xzm /opt/000; mount -o loop $XZM/001-core.xzm /opt/001
    [ `uname -m` = x86_64 ] && prefix="-x86-64"
    ln -sf /opt/000/lib/firmware /lib/firmware; ln -sf /opt/000/lib/modules /lib/modules; ln -sf /opt/001/lib64/libc.so.6 /lib/libc.so.6; ln -sf /opt/001/lib64/ld-linux"$prefix".so.2 /lib/ld-linux"$prefix".so.2; ln -s /opt/001/bin/kmod /bin/modprobe
    # Watchdog handler:
    wdog=`egrep -o " watchdog=[^ ]+" /proc/cmdline | cut -d= -f2 | head -n1`
    #if [ "$wdog" -o "$biso" ]; then
	#[ "$wdog" ] || wdog=softdog
    if [ "$wdog" ]; then
	#[ "$wdog" = iTCO_wdt ] && modprobe lpc_ich 2>/dev/null
	modprobe $wdog
	# Fallback to softdog if /dev/watchdog is not found (driver is not initializing the hardware):
	SLEEP=5; while [ $SLEEP -gt 0 -a ! -e /dev/watchdog ]; do usleep 500000; let SLEEP=SLEEP-1; done
	[ -e /dev/watchdog ] || { modprobe -r $wdog; modprobe softdog; }
	SLEEP=5; while [ $SLEEP -gt 0 -a ! -e /dev/watchdog ]; do usleep 500000; let SLEEP=SLEEP-1; done
	cp -a /opt/000/etc/watchdog.conf /etc; mkdir -p /var/log/watchdog /var/run
	#sed -i 's|120|30|' /etc/watchdog.conf
	/opt/000/usr/sbin/wd_keepalive -X 1 2>/dev/null
    fi
    vga=`lspci | grep 0300: | head -n1 | cut -d: -f3-4 | sed s/:/d0000/g`; [ "$vga" ] && driver="$(grep -i $vga /lib/modules/`uname -r`/modules.alias 2>/dev/null | head -n1 | rev | cut -d" " -f1 | rev)"
    # nvidia/nouveau quirks:
    ls -1 $XZM | grep -q nvidia-drivers && driver=nvidia
    [ "$driver" ] || { lspci | grep 0300: | head -n1 | cut -d: -f3 | grep -q "10de" && driver=nouveau; }
    # VirtualBox quirk:
    #[ "$driver" = vboxvideo ] || modprobe $driver 2>/dev/null
    modprobe $driver 2>/dev/null
    test -e /dev/fb0 || { cp /opt/001/sbin/v86d /sbin; modprobe uvesafb mode_option=1024x768-32; }
    if test -e /dev/fb0; then
	rm -r /lib; ln -sf /opt/001/lib64 /lib; ln -sf /opt/001/usr/lib64 /usr/lib
	if test -e $DOC/kiosk.jpg; then
	    /opt/001/usr/bin/fbv -a -c -u -i -k -e -r -y $DOC/kiosk.jpg >/dev/null 2>&1 &
	else
	    /opt/001/usr/bin/fbv -a -c -u -i -k -e -r -y $DOC/default.jpg >/dev/null 2>&1 &
	fi
    fi
fi

# Display kiosk version:
version=`cat $DOC/version`
[ "$quiet" ] || echo $i"OS version: $version"

# Setup aufs:
mount -nt aufs -o nowarn_perm,xino=/memory/xino/.aufs.xino,br:/memory/changes=rw aufs /union

# Copy modules to RAM if we are not doing PXE boot:
[ "$IP" ] || { for x in $XZM/*; do cp -a $x /memory/copy2ram || { echo -e "[1;31m""\nNot enough memory to copy all kiosk data - we can't continue, exiting....""[0m"; escape; }; done; }

# Populate aufs with modules:
for x in `ls -1 /memory/copy2ram | grep \\.xzm$`; do
    mkdir -p /memory/images/$x
    mount -nt squashfs -o loop /memory/copy2ram/$x /memory/images/$x 2>/dev/null
    if [ $? -eq 0 ]; then
	mount -no remount,add:1:/memory/images/$x=rr aufs /union
    else
	echo $i"[1;36m""Cannot read $x. Corrupted module?""[0m"
	echo -e "[1;31m""\nPlease burn the Kiosk ISO once again, exitig now...""[0m"
	escape
    fi
done

# Copy important stuff to union:
[ "$quiet" ] && { while [ "`pidof fbv`" ]; do usleep 500000; done; umount /opt/000 /opt/001 2>/dev/null; rm -r /lib; }
echo "$version" > /union/etc/version
cp -a /bin/busybox /union/bin; ln -sf /union/lib /lib
cp -a $DOC/default.jpg /union/usr/share/wallpapers 2>/dev/null

# Finish:
exec /sbin/switch_root /union /sbin/init
echo -e "[1;31m""!!ERROR!!\nSomething went wrong as You should never be here.\nPlease copy debugging data printed below and report this issue to support@porteus-kiosk.org\nPress Ctrl+Alt+Del to reboot.""[0m"
echo; echo "[1;33m""DEBUGGING DATA:""[0m"; echo
uname -r; cat /proc/cmdline; ls /lib/modules 2>/dev/null; ls /sys/class/net
read
